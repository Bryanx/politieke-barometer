@using System.Web.Optimization
@using BAR.BL.Domain.Users
@using Microsoft.Ajax.Utilities
@model BAR.UI.MVC.Models.UserViewModel

<!-- User Settings -->
<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_title">
                <h2>Gebruiker instellingen</h2>
                <div class="clearfix"></div>
            </div>
            <div class="x_content">
                <br/>
                <form method="post" action="/api/User" id="userSettingsForm" class="form-horizontal">
                    <div class="form-group">
                        <label class="control-label col-md-3 col-sm-3 col-xs-12" for="first-name">
                            Voornaam <span class="required">*</span>
                        </label>
                        <div class="col-md-6 col-sm-6 col-xs-12">
                            @Html.TextBoxFor(model => model.SettingsViewModel.Firstname, "", new {@class = "form-control col-md-7 col-xs-12"})
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3 col-sm-3 col-xs-12" for="last-name">
                            Achternaam <span class="required">*</span>
                        </label>
                        <div class="col-md-6 col-sm-6 col-xs-12">
                            @Html.TextBoxFor(model => model.SettingsViewModel.Lastname, "", new {@class = "form-control col-md-7 col-xs-12"})
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3 col-sm-3 col-xs-12">Geslacht</label>
                        <div class="col-md-6 col-sm-6 col-xs-12">
                            <div id="gender" class="btn-group" data-toggle="buttons">
                                @if (Model.SettingsViewModel.Gender == Gender.MAN) {
                                    <label class="btn btn-default active">
                                        @Html.RadioButtonFor(model => model.SettingsViewModel.Gender, Gender.MAN) Man
                                    </label>
                                    <label class="btn btn-default">
                                        @Html.RadioButtonFor(model => model.SettingsViewModel.Gender, Gender.WOMAN) Vrouw
                                    </label>
                                } else {
                                    <label class="btn btn-default">
                                        @Html.RadioButtonFor(model => model.SettingsViewModel.Gender, Gender.MAN) Man
                                    </label>
                                    <label class="btn btn-default active">
                                        @Html.RadioButtonFor(model => model.SettingsViewModel.Gender, Gender.WOMAN) Vrouw
                                    </label>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3 col-sm-3 col-xs-12">
                            Geboortedatum
                        </label>
                        <div class="col-md-6 col-sm-6 col-xs-12">
                            @Html.TextBoxFor(model => model.SettingsViewModel.DateOfBirth, new {@class = "form-control col-md-7 col-xs-12"})
                            @Html.ValidationMessageFor(model => model.SettingsViewModel.DateOfBirth, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    @Html.HiddenFor(model => model.SettingsViewModel.Area.AreaId)
                        <div class="form-group">
                        <label class="control-label col-md-3 col-sm-3 col-xs-12">
                            Land
                        </label>
                        <div class="col-md-6 col-sm-6 col-xs-12">
                            @Html.TextBoxFor(model => model.SettingsViewModel.Area.Country, new {@class = "form-control col-md-7 col-xs-12"})
                            @Html.ValidationMessageFor(model => model.SettingsViewModel.Area.Country, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-6 col-sm-6 col-xs-12 col-md-offset-3">
                            <button type="submit" class="btn btn-dark">Opslaan</button>
                            <div id="messageSettings" style="display: inline"></div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Alert Settings -->
<div class="row">
    <div class="col-md-6 col-xs-12">
        <div class="x_panel">
            <div class="x_title">
                <h2>Alert instellingen</h2>
                <div class="clearfix"></div>
            </div>
            <div class="x_content">
                <br/>
                <form method="post" action="/api/User" id="alertSettingsForm" class="form-horizontal">
                    <div class="form-group">
                        @Html.LabelFor(model => model.SettingsViewModel.AlertsViaWebsite,"Alerts ontvangen op deze website", htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                        <div class="col-md-3 col-sm-3 col-xs-12">
                            @Html.DropDownListFor(model => model.SettingsViewModel.AlertsViaWebsite, new List<SelectListItem>()
                            {
                                new SelectListItem() { Text = "Ja", Value = "True" },
                                new SelectListItem() { Text = "Nee", Value = "False"}
                            }, new { @class="form-control" })
                            @Html.ValidationMessageFor(model => model.SettingsViewModel.AlertsViaWebsite, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.SettingsViewModel.AlertsViaEmail,"Alerts ontvangen per email", htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                        <div class="col-md-3 col-sm-3 col-xs-12">
                            @Html.DropDownListFor(model => model.SettingsViewModel.AlertsViaEmail, new List<SelectListItem>()
                            {
                                new SelectListItem() { Text = "Ja", Value = "True" },
                                new SelectListItem() { Text = "Nee", Value = "False"}
                            }, new { @class="form-control" })
                            @Html.ValidationMessageFor(model => model.SettingsViewModel.AlertsViaEmail, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.SettingsViewModel.WeeklyReviewViaEmail,"Weekly review ontvangen per email", htmlAttributes: new { @class = "control-label col-md-6 col-sm-6 col-xs-12" })
                        <div class="col-md-3 col-sm-3 col-xs-12">
                            @Html.DropDownListFor(model => model.SettingsViewModel.WeeklyReviewViaEmail, new List<SelectListItem>()
                            {
                                new SelectListItem() { Text = "Ja", Value = "True" },
                                new SelectListItem() { Text = "Nee", Value = "False"}
                            }, new { @class="form-control" })
                            @Html.ValidationMessageFor(model => model.SettingsViewModel.WeeklyReviewViaEmail, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-6 col-sm-6 col-xs-12 col-md-offset-6">
                            <button type="submit" class="btn btn-dark">Opslaan</button>
                            <div id="alertSettingsMessage" style="display: inline"></div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Account Settings -->
    <div class="col-md-6 col-xs-12">
        <div class="x_panel">
            <div class="x_title">
                <h2>Account instellingen</h2>
                <div class="clearfix"></div>
            </div>
            <div class="x_content">
                <br/>
                <form method="post" action="/api/User/UpdateAccount" id="accountSettingsForm" class="form-horizontal">
                    <div class="form-group">
                        <label class="control-label col-md-3 col-sm-3 col-xs-12" for="password">
                           Wachtwoord <span class="required">*</span>
                        </label>
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @Html.PasswordFor(model => model.SettingsViewModel.Password, new {type = "password", @class = "form-control col-md-7 col-xs-12"})
                            @Html.ValidationMessageFor(model => model.SettingsViewModel.Password, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3 col-sm-3 col-xs-12" for="passwordnew">
                            Nieuw wachtwoord <span class="required">*</span>
                        </label>
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @Html.PasswordFor(model => model.SettingsViewModel.PasswordNew, new { type = "password", @class = "form-control col-md-7 col-xs-12" })
                            @Html.ValidationMessageFor(model => model.SettingsViewModel.PasswordNew, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-6 col-sm-6 col-xs-12 col-md-offset-3">
                            <button type="submit" class="btn btn-dark">Opslaan</button>
                            <div id="accountSettingsMessage" style="display: inline"></div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Remove account Settings -->
<div class="row">
<div class="col-md-6 col-xs-12">
    <div class="x_panel">
        <div class="x_title">
            <h2>Account deactiveren</h2>
            <div class="clearfix"></div>
        </div>
        <div class="x_content">
            <br/>
            <form method="post" action="/api/User" id="removeAccountForm" class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6 col-sm-6 col-xs-12 col-md-offset-3">
                        Let op. Bij het verwijderen van uw account worden al uw instellingen, grafieken en widgets verwijderd.
                        <br/>
                        <br/>
                        <button type="submit" class="btn btn-danger">Account verwijderen</button>
                        <div id="removeAccountMessage" style="display: inline"></div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
</div>

@section CustomJS{
    <script type="text/javascript">
        //When the user settings form is submitted: post request to webapi
        $("#userSettingsForm").on("submit", function(event) {
            submitForm($(this), event, $("#messageSettings"));
        });
        $("#alertSettingsForm").on("submit", function(event) {
            submitForm($(this), event, $("#alertSettingsMessage"));
        });
        $("#accountSettingsForm").on("submit", function(event) {
            submitForm($(this), event, $("#accountSettingsMessage"));
        });
        
        //Ajax call in generic function so every form can use the same code.
        function submitForm($this, event, message) {
                $.ajax({
                    type: $this.attr('method'),
                    url: $this.attr('action'),
                    data: $this.serialize(),
                    succes: message
                        .addClass('green')
                        .html("Saved.")
                        .fadeOut(1000,
                            function() {
                                $(this)
                                    .removeClass()
                                    .html("")
                                    .css("display", "inline");
                            })
                }).fail(() => message
                    .addClass('red')
                    .html("Mislukt.")
                    .fadeOut(1000,
                        function() {
                            $(this)
                                .removeClass()
                                .html("")
                                .css("display", "inline");
                        }));
                event.preventDefault();
        }
    </script>
}